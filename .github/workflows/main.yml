name: Android Release Build

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual trigger from GitHub Actions tab

jobs:
  build_android:
    runs-on: ubuntu-latest # Use an Ubuntu runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17' # Android builds often require Java 17

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          # Set Flutter version if you need a specific one, e.g., '3.x.x'
          # flutter-version: '3.19.0' 

      - name: Install Dependencies
        run: flutter pub get

      - name: Decode Keystore File
        env:
          ENCODED_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          # Decode the base64 string back into a .jks file
          echo "$ENCODED_KEYSTORE" | base64 --decode > android/app/release-key.jks
          # Set environment variable for Gradle to find the keystore
          echo "ANDROID_KEYSTORE_PATH=$(pwd)/android/app/release-key.jks" >> $GITHUB_ENV

      - name: Build Android Release APK
        run: flutter build apk --release
        env:
          # Pass signing credentials as environment variables to Gradle
          # These names match what you set in build.gradle
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          artifacts: "build/app/outputs/apk/release/*"
          tag: v1.0.0
          
          token: ${{ secrets.TOKEN }}
